{"$message_type":"diagnostic","message":"borrowed data escapes outside of function","code":{"code":"E0521","explanation":"Borrowed data escapes outside of closure.\n\nErroneous code example:\n\n```compile_fail,E0521\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el: &str| {\n    list.push(el); // error: `el` escapes the closure body here\n};\n```\n\nA type annotation of a closure parameter implies a new lifetime declaration.\nConsider to drop it, the compiler is reliably able to infer them.\n\n```\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el| {\n    list.push(el);\n};\n```\n\nSee the [Closure type inference and annotation][closure-infere-annotation] and\n[Lifetime elision][lifetime-elision] sections of the Book for more details.\n\n[closure-infere-annotation]: https://doc.rust-lang.org/book/ch13-01-closures.html#closure-type-inference-and-annotation\n[lifetime-elision]: https://doc.rust-lang.org/reference/lifetime-elision.html\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":8974,"byte_end":8980,"line_start":328,"line_end":328,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"    filter: Arc<Option<Expression>>,","highlight_start":5,"highlight_end":11}],"label":"`filter` is a reference that is only valid in the function body","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":11462,"byte_end":12348,"line_start":416,"line_end":442,"column_start":22,"column_end":11,"is_primary":true,"text":[{"text":"        let handle = thread::spawn(move || loop {","highlight_start":22,"highlight_end":50},{"text":"            let path_res =","highlight_start":1,"highlight_end":27},{"text":"                thread_receiver.lock().unwrap().recv();","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let processing_res = match path_res {","highlight_start":1,"highlight_end":50},{"text":"                Ok(path) => {","highlight_start":1,"highlight_end":30},{"text":"                    let processing_res = process_log_file(","highlight_start":1,"highlight_end":59},{"text":"                        &path,","highlight_start":1,"highlight_end":31},{"text":"                        thread_filter.clone(),","highlight_start":1,"highlight_end":47},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                    match processing_res {","highlight_start":1,"highlight_end":43},{"text":"                        Ok(res) => res,","highlight_start":1,"highlight_end":40},{"text":"                        Err(err) => {","highlight_start":1,"highlight_end":38},{"text":"                            report_error(format!(\"Error processing file {}\", &path.to_string_lossy()), Some(err.to_string()));","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            continue;","highlight_start":1,"highlight_end":38},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Err(_) => {","highlight_start":1,"highlight_end":28},{"text":"                    break;","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let _ =","highlight_start":1,"highlight_end":20},{"text":"                thread_sender.send(processing_res).unwrap();","highlight_start":1,"highlight_end":61},{"text":"        });","highlight_start":1,"highlight_end":11}],"label":"`filter` escapes the function body here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":8974,"byte_end":8980,"line_start":328,"line_end":328,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"    filter: Arc<Option<Expression>>,","highlight_start":5,"highlight_end":11}],"label":"has type `Arc<Option<Expression<'1>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":11462,"byte_end":12348,"line_start":416,"line_end":442,"column_start":22,"column_end":11,"is_primary":true,"text":[{"text":"        let handle = thread::spawn(move || loop {","highlight_start":22,"highlight_end":50},{"text":"            let path_res =","highlight_start":1,"highlight_end":27},{"text":"                thread_receiver.lock().unwrap().recv();","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let processing_res = match path_res {","highlight_start":1,"highlight_end":50},{"text":"                Ok(path) => {","highlight_start":1,"highlight_end":30},{"text":"                    let processing_res = process_log_file(","highlight_start":1,"highlight_end":59},{"text":"                        &path,","highlight_start":1,"highlight_end":31},{"text":"                        thread_filter.clone(),","highlight_start":1,"highlight_end":47},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                    match processing_res {","highlight_start":1,"highlight_end":43},{"text":"                        Ok(res) => res,","highlight_start":1,"highlight_end":40},{"text":"                        Err(err) => {","highlight_start":1,"highlight_end":38},{"text":"                            report_error(format!(\"Error processing file {}\", &path.to_string_lossy()), Some(err.to_string()));","highlight_start":1,"highlight_end":127},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                            continue;","highlight_start":1,"highlight_end":38},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Err(_) => {","highlight_start":1,"highlight_end":28},{"text":"                    break;","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let _ =","highlight_start":1,"highlight_end":20},{"text":"                thread_sender.send(processing_res).unwrap();","highlight_start":1,"highlight_end":61},{"text":"        });","highlight_start":1,"highlight_end":11}],"label":"argument requires that `'1` must outlive `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0521]\u001b[0m\u001b[0m\u001b[1m: borrowed data escapes outside of function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:416:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    filter: Arc<Option<Expression>>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`filter` is a reference that is only valid in the function body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `Arc<Option<Expression<'1>>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m416\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let handle = thread::spawn(move || loop {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m ______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m417\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let path_res =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                thread_receiver.lock().unwrap().recv();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m441\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                thread_sender.send(processing_res).unwrap();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m442\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        });\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`filter` escapes the function body here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9margument requires that `'1` must outlive `'static`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0521`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0521`.\u001b[0m\n"}
